[
    
    {
        "title": "대한민국 법정구역 지도",
        "excerpt": "최근 d3js를 이용하여 지도 그리는 법을 익혀보는 중입니다. 지난 글에서는 세계지도에 Global Peace Index를 표기해보았는데 이번에는 한국 지도를 한/영 지역명과 함께 아래와 같이 그려 보았습니다. 지도상에 색으로 표시된 지역을 클릭하면 세부지도를 3단계(시도»시군구»읍면동)까지 볼 수 있습니다.",
        "content": "최근 d3js를 이용하여 지도 그리는 법을 익혀보는 중입니다. 지난 글에서는 세계지도에 Global Peace Index를 표기해보았는데 이번에는 한국 지도를 한/영 지역명과 함께 아래와 같이 그려 보았습니다. 지도상에 색으로 표시된 지역을 클릭하면 세부지도를 3단계(시도»시군구»읍면동)까지 볼 수 있습니다.                                                                                                                                                                                Dark Theme                                                             Github Repository1. 공간정보 받아오기지도를 표시하기 위해서는 시도, 시군구 및 읍면동 정보를 포함한 한국 지역 공간정보가 필요했습니다. 구글 검색을 통해서 지오서비스에서 해당 정보가 포함된 shapefile 데이터를 받을 수 있었습니다. 사용한 자료는 2018년 4월 업데이트 공간정보입니다.2. 주소코드정보 받아오기위에서 받아온 공간정보 자료는 시도, 시군구, 읍면동(법정동) 구분하여 자료마다 단계별 지역 정보만 포함이 되어있었습니다. 세 단계의 지역 정보를 이어주기 위한 - 예를 들어서 이촌동(읍면동)을 용산구(시군구)와 잇고 다시 서울특별시(시도)와 잇기 위한 주소정보가 필요하였습니다. 해당 정보는 행정안전부 사이트에서 엑셀 파일으로 구할 수 있었습니다.3. 영문 정보 조합하기2번 단계에서 구한 엑셀 파일은 csv 유형으로 저장한 후에 python 을 사용해서 시도 및 시군구 지역명 영문화 작업을 하였습니다. 1번 단계에서 구한 자료들에 영문명들도 포함되어 있었는데 shapefile  에서 데이터를 뽑아내는데 익숙지 않아 결국 구글+위키피디아를 뒤져가며 노가다로 메꾸었습니다. 다시 찾아보니 mapshaper에 cut-table이라는 기능이 있는듯 합니다. 무식해서 몸이 고생한다는 말을 몸소 실현3. 웹 데이터 파일 준비하기위에서 준비한 자료들을 d3js로 읽기 위해 mapshaper를 사용하여 topojson 파일으로 준비하였습니다. 각 지역 단계별로 아래와 같이 콘솔에서 실행하였습니다.# 읍면동 데이터 준비 코드mapshaper encoding=euc-kr *.shp    # euc-kr로 인코딩된 shapefile을 읽어옵니다.    -simplify keep-shapes 3%       # 공간정보를 3%까지 단순화 시킵니다.    -proj latlong                  # d3js가 읽는 투영법으로 바꾸어 줍니다.    -join kor_admin_3_ref_w_en.csv keys=EMD_CD,LVL_3_CD  # csv 파일을 조합합니다.    -o format=topojson kor_admin_3.topojson # topojson 파일로 저장합니다.4. 데이터 시각화하기위에서 준비한 데이터 파일들을 d3js로 읽어 시각화 해주었습니다. 시각화 코드는 Github에섯 확인할 수 있습니다.느낀점 몇 가지      한국 지도를 그리려고 준비하면서 한국 공간정보 구하기가 생각보다 어려웠습니다. 무료로 읍면동까지 세부정보를 찾을 수 있는 곳이 지오서비스 사이트 외에는 보이지 않았고 위에서 처럼 지역 단계별 정보가 조합된 파일은 찾아볼 수 없었습니다. 또 시각화하였을 때 읍면동까지 표시하게 되면 지도상에 겹치거나 비어있는 공간들이 보입니다. 공간정보를 많이 사용해보지 않아 중간에 단순화 작업 때문에 그런 것인지 무료로 구하려 보니 그런 것인지는 잘 모르겠습니다. Natural Earth 세계지도용 자료와 비교해서는 데이터 질이 어쩔 수 없이 부족한 거 같아 아쉬웠습니다.        이번에 처음 알게 되었는데 한국에는 두 종류의 동 이름이 있다고 합니다. 행정동은 법정동보다 자주 바뀌는 편이어서 공간정보자료에는 법정동이 표시되어 있다고 합니다.          법정동 이름은 지적도와 주소 등 모든 법적 업무에 사용하는 행정구역 공식 명칭이다. 하지만 행정동은 행정기관들이 주민 수, 면적 등을 고려해 단순히 행정 편의를 위해 설정한 행정구역이다. 통상 동사무소로 불리는 행정기관은 이 행정동마다 1곳씩 설치돼 있다. 출처:연합뉴스 - ‘한 동네, 두 이름’…헷갈리는 행정동·법정동            0개국어 능력자 같으니… 한글로 몇 년 만에 이런 긴 글을 써보았는데 페북이나 문자에나 쓰던 한글을 길게 쓰려니 어색하고 외국인 같고 어렵습니다. 근데 영어로 쓴 글을 읽어도 어색하고 외국인 같고…  ",
        "date": "Aug 14, 2018",
        "url": " https://blog.micbon.com//post/kor-map/",
        "author": "Michael J. Moon",
        "tags": "d3js, javascript, map, mapshaper, topojson, 한국지도"
    },
    
    {
        "title": "Map of Global Peace Index",
        "excerpt": "The interactive map below shows data from a recent Data for a Cause Challenge. The Challenge requests participants to create data visualizations for non-profit organizations. This particular challenge was about presenting the global peace trends.",
        "content": "The interactive map below shows data from a recent Data for a Cause Challenge. The Challenge requests participants to create data visualizations for non-profit organizations. This particular challenge was about presenting the global peace trends.  In this Data for a Cause challenge we are taking a closer look at these troubling signs by visualizing global peace trends.We used Global Peace Index produced by IEP. The Global Peace Index is considered the standard for measuring peace around the world.The winners are presented here. I didn’t complete mine within the time limit and did not make a submission.                                                                            Year                                                                                                                                                                                            Options                                                                                                                                            Show Change from 2008                                                                                                                                            Group by Regions                                                        Global Peace Index 2018                The Global Peace Index (GPI) is produced annually by the Institute for Economic and Peace. The Index measures the level of peacefulness for 163 independent states and territories using                    23 individual indicators.                Check the interactive map below for the results from 2008 to 2018. Click for details on each country.                Source: Institute for Economics and Peace. Learn more at economicsandpeace.org and visionofhumanity.org                                                                                                                                                                                                                            Afterthoughts  I used D3.js a JavaScript library enabling data-driven web pages. I have been enjoying it as it allows more control over the visualization compared to others I used such as R’s ggplot2 and Python’s bokeh and plotly. My code is probably quite sloppy since I am not an experienced JS developer but I was able to play with more complex and customized interactions.  This is my first data-driven map I have ever created. I used geographic data from Natural Earth. Picking the colours to present the data on the map probably took the majority of the time. It was challenging to present the numeric values without a physical axis. Looking at other people’s visualizations (including the winners’) helped. Github Repository Open Visualization on a new Page",
        "date": "Jul 30, 2018",
        "url": " https://blog.micbon.com//post/peace-map/",
        "author": "Michael J. Moon",
        "tags": "d3js, javascript, data-visualization, map"
    },
    
    {
        "title": "A bokeh server app for up-to-date stock prices",
        "excerpt": "The python bokeh library lets you build data visualization applications on the web and run them on a server. Below is plot that uses bokeh.server along with other python libraries to display up-to-date (mostly U.S.) stock market closing prices.",
        "content": "The python bokeh library lets you build data visualization applications on the web and run them on a server. Below is plot that uses bokeh.server along with other python libraries to display up-to-date (mostly U.S.) stock market closing prices.            &amp;#10094;        &amp;#10095;                                        Script embed                                        iFrame embed            Data sourcesI used pandas-datareaderand alpha_vantage pythonlibraries to access free data providers. The former library lets you accessstock market data from Morningstar among other providers. Alpha Vantageprovides similar data with minimal time delay (1 minute).ApplicationUsing bokeh.server, I was able to plot, add widgets - a button groupfor period selection and an auto-complete text input box for ticker selection.You can find the source code for the plot here .DeploymentI used heroku’s free tier service to hostthe app online. It’s easy to use if you are used to using git. The free-tiercomes with usage limits, most of which are sufficient for my purpose.The only noticeable limit is the fact that the machine goes to sleep after30 minutes of inactivity. Hence, you likely waited a while untilthe plot showed up.I also used docker to make the app portableto other platforms if necessary (and to get myself familiarized with it).Notes      –allow-websocket-origin          By default, cross site connections to the Bokeh server websocket are not allowed. You can enable websocket connections originating from additional hosts by specifying them with the –allow-websocket-origin option.        Not really understanding how servers work, I fumbled with this for quite a bit. I added --allow-websocket-origin=blog.micbon.com as well as --allow-websocket-origin=mm-plot-stocks.herokuapp.com to allow access from this page and the heroku page. I embedded the plots using both &amp;lt;script&amp;gt; and &amp;lt;iframe&amp;gt; tags to see the difference.        not so responsive    I found it difficult to make the application responsive (resize along with the display size). It may be possible if I fumbled a little longer but since the plot itself wouldn’t be able to show much when it’s too small I decided to leave it at a fixed size.        another plotting library    I also created the same plot using plotly’s dash module. You can see the app here and the source codes here . It was actually easier to use in my opinion. The only trouble I have is making it work with Docker. I still have not figured out how… :(  ",
        "date": "Apr 30, 2018",
        "url": " https://blog.micbon.com//post/bokeh-server/",
        "author": "Michael J. Moon",
        "tags": "bokeh, bokeh-server, python, data-visualization, heroku, docker"
    },
    
    {
        "title": "Hello Jekyll!",
        "excerpt": "I had previously my blog hosted using Wordpress on a shared hosting server. The hosted Wordpress worked out nicely for me especially with its multisite feature. I was able to host multiple sites including a single page responsive site for my wedding. There is a plenty of free themes and plugins a...",
        "content": "I had previously my blog hosted using Wordpress on a shared hosting server. The hosted Wordpress worked out nicely for me especially with its multisite feature. I was able to host multiple sites including a single page responsive site for my wedding. There is a plenty of free themes and plugins available to configure and customize a Wordpress site with ease. However, I switched the hosting mechanism to Jekyll on GitHub Pages after finding about it recently. Below are 4 reasons why I switched to Jekyll.      Price  While I did not pay for Wordpress or any of the plugins/themes I used, I had to pay for my domain and hosting services. I used the lower-tier plan from SiteGround and paid approximately USD 160 per year. The plan included a free domain which I used for all my sites using subdomains.GitHub Pages lets you to host static sites for free on GitHub and Jekyll is a free open source software that turns static files to a website. If you are comfortable using GitHub Pages’s default domain &amp;lt;username&amp;gt;.github.io/ or &amp;lt;username&amp;gt;.github.io/&amp;lt;projectname&amp;gt;, you can host a site with zero cost.      Git and markdown  As mentioned, GitHub Pages sites are hosted on GitHub. This means you can track any changes made to the site using git. You can track new and modified pages as well as site configuration and aesthetic changes. The integration also means that I can write and push new articles directly from a text editor such as Atom.Also, Jekyll will automatically create .html files from markdown(.md) files. Writing and editing in markdown is much easier with its simple syntax. I had been already using git and markdown and this was a definite selling point for me.HTML vs. markdown&amp;lt;!-- HTML --&amp;gt;&amp;lt;h2&amp;gt;Why I switched to Jekyll&amp;lt;/h2&amp;gt;&amp;lt;h3&amp;gt;1. Markdown&amp;lt;/h3&amp;gt;&amp;lt;p&amp;gt;  Writing in &amp;lt;i&amp;gt;HTML&amp;lt;/i&amp;gt; is very &amp;lt;b&amp;gt;cumbersome&amp;lt;/b&amp;gt;.&amp;lt;/p&amp;gt;&amp;lt;!-- markdown --&amp;gt;## Why I switched to Jekyll### 1. MarkdownWriting in _markdown_ is very **simple**.      Liquid template language  Jekyll uses Liquid template language to process templates. The template language has a simple syntax and I found it to be easier to use than editing php files for Wordpress themes and parts.As an example, in Wordpress, I wrote the About page in raw html of ~300 lines and editing the page every now and then was always tedious. I could have probably streamlined the work by creating a customer page template in Wordpress; however, the need just never seemed to justify the effort.On the other hand, Liquid made templating much simpler and I was able to create the template for the About page from scratch within a few hours of reading and typing. The template made it simple to add and edit items using yaml front matter.HTML vs. Liquid&amp;lt;!-- HTML --&amp;gt;&amp;lt;div class=&quot;cv-container sub-container&quot;&amp;gt;  &amp;lt;h2 class=&quot;entry-header cv-entry-header&quot;&amp;gt;University of Toronto, Toronto, Ontario, Canada&amp;lt;/h2&amp;gt;  &amp;lt;div class=&quot;entry-content&quot;&amp;gt;    &amp;lt;h4&amp;gt;MSc in Biostatistics&amp;lt;/h4&amp;gt;    &amp;lt;p&amp;gt;&amp;lt;small&amp;gt;November 2016&amp;lt;/small&amp;gt;&amp;lt;/p&amp;gt;    &amp;lt;h5&amp;gt;Major Courses&amp;lt;/h5&amp;gt;    &amp;lt;ul&amp;gt;      &amp;lt;li&amp;gt;Statistical analysis of health economic data&amp;lt;/li&amp;gt;      &amp;lt;li&amp;gt;Time series analysis&amp;lt;/li&amp;gt;      &amp;lt;li&amp;gt;Modern statistics and data mining&amp;lt;/li&amp;gt;      &amp;lt;li&amp;gt;Survival analysis&amp;lt;/li&amp;gt;      &amp;lt;li&amp;gt;Mathematical statistics&amp;lt;/li&amp;gt;      &amp;lt;li&amp;gt;Categorical data analysis&amp;lt;/li&amp;gt;    &amp;lt;/ul&amp;gt;  &amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;# Liquid template{% for education in site.educations reversed %}&amp;lt;div class=&quot;row&quot;&amp;gt;  &amp;lt;div class=&quot;col-sm-5&quot;&amp;gt;    &amp;lt;h3 class=&quot;grey&quot;&amp;gt;{{ education.school }}&amp;lt;/h3&amp;gt;    &amp;lt;h6 class=&quot;grey&quot;&amp;gt;{{ education.location }}&amp;lt;/h6&amp;gt;  &amp;lt;/div&amp;gt;  &amp;lt;div class=&quot;col mb-3&quot;&amp;gt;    &amp;lt;h5&amp;gt;{{ education.degree }}&amp;lt;/h5&amp;gt;    &amp;lt;h6&amp;gt;      {{ education.conferreddate | date: &quot;%B %Y&quot;}} {% if education.misc %} | {{ education.misc }} {% endif %}    &amp;lt;/h6&amp;gt;    &amp;lt;h6&amp;gt;      &amp;lt;div class=&quot;grey&quot;&amp;gt;Major Courses&amp;lt;/div&amp;gt;      &amp;lt;ul&amp;gt;        {% for course in education.courses %}        &amp;lt;li&amp;gt;{{ course.name }}&amp;lt;/li&amp;gt;        {% endfor %}      &amp;lt;/ul&amp;gt;    &amp;lt;/h6&amp;gt;  &amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;{% endfor %}# yaml front matter for Liquid---school:   &#39;University of Toronto&#39;location: &#39;Toronto, Ontario, Canada&#39;degree:   &#39;MSc in Biostatistics&#39;conferreddate: &#39;November 2016&#39;courses:  - name: &#39;Statistical analysis of health economic data&#39;  - name: &#39;Time series analysis&#39;  - name: &#39;Modern statistics and data mining&#39;  - name: &#39;Survival analysis&#39;  - name: &#39;Mathematical statistics&#39;  - name: &#39;Categorical data analysis&#39;---      Interactive plots  The final and tipping point for the switch was the ability to render interactive plots. Lately, I started learning about interactive data visualizations using Python’s bokeh library. I am planning to write blog posts with the visualizations.However, embedding theses javascript-based plots on Wordpress turned out to be much more of a hassle than expected. Wordpress has filters that which capture specific parts of post/page contents and create the final output in html from the online editor. This prevented from embedding bokeh plots directly using html in the editor.I ended up using a plugin that enabled embedding raw html snippets; however, the online workflow was less than ideal and when the raw html was finally embedded, the rendered plot was not contained in the post container div.This is when I started looking into alternatives and found about Jekyll on GitHub Pages. This post by Brian Caffey showed that it was possible to embed bokeh plots using {%include ...%} tag. Having realized other pros of using Jekyll listed above, I tested by setting up this blog and manually migrating posts with bokeh plots. The whole process was took more less time and pain. It took me about two half days of effort including some reading and and the outcome was much more satisfying.Is Jekyll better than Wordpress?Googling “Jekyll vs Wordpress” gives a plenty of hits on posts on why someone chose Jekyll over Wordpress.This makes it seem like Jekyll is a clear winner. However, wedontlikespaces’s answer on this Reddit page was the most satisfying answer I read.  [Jekyll] is great at what it does, but it’s no replacement for WordPress. They solve different problems…But for personal projects or projects where your happy to manage everything yourself then you’re fine.Jekyll seems to be a great tool for a personal [static] blog. Also, its flexibility gives me a plenty of opportunity to learn new things without being overwhelming.I think my tiny personal blog will stick to Jekyll for now.",
        "date": "Feb 15, 2018",
        "url": " https://blog.micbon.com//post/hello-jekyll/",
        "author": "Michael J. Moon",
        "tags": "blogging, jekyll, github, wordpress"
    },
    
    {
        "title": "Setting up a collaborative Python project environment",
        "excerpt": "Recently, I have convinced two of my friends to form a study group on data science. We are planning to follow courses from different online educational platforms such as DataCamp and edX while completing projects using data from Kaggle. Before we start our first project with Kaggle’s introductory...",
        "content": "Recently, I have convinced two of my friends to form a study group on data science. We are planning to follow courses from different online educational platforms such as DataCamp and edX while completing projects using data from Kaggle. Before we start our first project with Kaggle’s introductory competition, we walked through the following steps to set up common, collaborative project environments.Create a virtual environmentConda is an open source package and environment manager included in Anaconda distribution. The distribution includes majority of common scientific Python packages used for data science. We will use it to create a virtual environment and manage packages separately per project. Miniconda is a lighter installer of the Anaconda distribution.Having installed the Conda manager, we can set up individual Python environments for each project. Each environment can be configured with different sets of packages and even different Python versions. To create a new environment, we use the following command line in Terminal on macOS and Linux or Anaconda Prompt on Windows.$ conda create -n titanic python=3.6Here, titanic is the environment name and the python=3.6 specifies the version for the environment. To activate the environment on macOS or Linux, use$ source activate titanicor$ activate titanicon Windows.When activated, the environment’s name appears on the command-line interface. To deactivate, use $ source dactivate on macOS and Linux or $ deactivate on Windows.Install packagesTo install packages in a virtual environment, you can use conda install &amp;lt;package-name&amp;gt; after activating the environment. Initially, we install the following scientific packages.(titanic) $ conda install scikit-learn(titanic) $ conda install pandasConda also installs their dependencies such as numpy and scipy.(titanic) $ conda install scikit-learnFetching package metadata ...........Solving package specifications: .Package plan for installation in environment /Users/xxxxx/anaconda3/envs/titanic:The following NEW packages will be INSTALLED:    mkl:          2017.0.3-0            numpy:        1.13.1-py36_0         scikit-learn: 0.19.0-np113py36_0    scipy:        0.19.1-np113py36_0Proceed ([y]/n)? ymkl-2017.0.3-0 100% |########################################################| Time: 0:00:54   2.13 MB/sSet up project structureTo enable collaboration among the study group members, we will work off a common GitHub repository per project. A consistent project structure is necessary to keep project artifacts clean and organized with multiple members working on the same project. There is a Python package just for that.Cookiecutter is a command-line utility that creates projects from templates and there is a template for data science projects. While we may modify structure as needed, the template gives us a starting point.Since the utility will be used outside any individual project, we install the package on the root Anaconda environment.$ conda install cookiecutterAfter installation, you can create a project structure with the following command in the directory where you want to place the project directory.$ cookiecutter https://github.com/drivendata/cookiecutter-data-scienceThe utility asks a few questions on the basic information about the project and creates a directory structure based on the template from https://github.com/drivendata/cookiecutter-data-science.Upload on GitHub  The git installer is available from here.We first initialize the project directory as a local git repository using the following command in the directory.$ git initThen add and commit all files and sub-directories within the project directory. Note a commit message is required for each commit when using git.$ git add .$ git commit -m &#39;Initial commit&#39;Now connect the local repository to a remote GitHub repository.$ git remote add origin git@github.com:&amp;amp;lt;user&amp;amp;gt;/&amp;amp;lt;repo-name&amp;amp;gt;The local and remote repositories are connected but the locally committed files aren’t available until they are pushed to the remote repository.$ git push -u origin masterConclusionWe now have  a common project repository where we can all pull from and push to  a standard project structure so that we can merge our individual contributions while keeping the structure organized and clean  a Python environment isolated for the project so we can also share our environment specifications per project",
        "date": "Jan 19, 2018",
        "url": " https://blog.micbon.com//post/env-set-up/",
        "author": "Michael J. Moon",
        "tags": "python, git, anaconda, cookiecutter"
    },
    
    {
        "title": "Creating linked plots using Python's bokeh library",
        "excerpt": "In this post, I am going to create interlinked, interactive scatter plots using the Bokeh library. Below is the description of the library from the homepage.",
        "content": "In this post, I am going to create interlinked, interactive scatter plots using the Bokeh library. Below is the description of the library from the homepage.  Bokeh is a Python interactive visualization library that targets modern web browsers for presentation. Its goal is to provide elegant, concise construction of novel graphics in the style of D3.js, and to extend this capability with high-performance interactivity over very large or streaming datasets. Bokeh can help anyone who would like to quickly and easily create interactive plots, dashboards, and data applications.I quite like its clean look and more than anything the interactive visualization capabilities. It also allows using javascript based web browser interactions without learning javascript. I have been picking on what it can do from its documentations and tutorials available on Bokeh NBViewer Gallery.Load librariesFirst, I am going to load the libraries I am going to use and run output_notebook function from the bokeh library. The function configures Bokeh plot objects to be displayed on the notebook.import pandas as pdfrom bokeh.io import output_notebook, output_file, showfrom bokeh.plotting import figurefrom bokeh.models import ColumnDataSourcefrom bokeh.models import CategoricalColorMapperfrom bokeh.models import Plot, Range1d, HoverToolfrom bokeh.layouts import gridplotfrom bokeh.palettes import Set2output_notebook()Load dataTo enable interlinking between plots, a common ColumnDataSource needs to be used as the data source between plots. You can create one from a pandas DataFrame or a dictionary. I am going to use the diabetes dataset originally from here to demonstrate this. Below is a brief description of the dataset from the original source.  Ten baseline variables, age, sex, body mass index, average blood pressure, and six blood serum measurements were obtained for each of n = 442 diabetes patients, as well as the response of interest, a quantitative measure of disease progression one year after baseline.I am going to plot each of the 9 numeric features against the response variable on individual scatter plots. I willIn the code block below, the dataset is loaded as a pandas DataFrame and a ColumnDataSource is defined using the DataFrame.df = pd.read_table(&#39;../data/diabetes_tab.txt&#39;)# assuming 1 is female and 2 is maledf[&#39;Gender&#39;] = [&#39;FEMALE&#39; if x == 1 else &#39;MALE&#39;                for x in df.SEX.values]df.rename(columns={&#39;AGE&#39;: &#39;Age&#39;}, inplace=True)one_source = ColumnDataSource(df)df.head()                  Age      SEX      BMI      BP      S1      S2      S3      S4      S5      S6      Y      Gender                  0      59      2      32.1      101.0      157      93.2      38.0      4.0      4.8598      87      151      MALE              1      48      1      21.6      87.0      183      103.2      70.0      3.0      3.8918      69      75      FEMALE              2      72      2      30.5      93.0      156      93.6      41.0      4.0      4.6728      85      141      MALE              3      24      1      25.3      84.0      198      131.4      40.0      5.0      4.8903      89      206      FEMALE              4      50      1      23.0      101.0      192      125.4      52.0      4.0      4.2905      80      135      FEMALE      Create an interactive scatter plotNext, I am going to create a single scatter plot with age and the response variable. I am going to add a few interaction effects including a hover effect showing the x, y values of each point.  Box select: Highlight data points selected in a rectangular box by dragging the mouse  Lasso select: Highlight data points selected in a lasso shape by dragging the mouse  Tap: Highlight selected data points by clicking the mouse  Wheel zoom: Zoom in and out of the plot using the mouse wheel zoom  Reset: Reset the plot to its default state# define a color map for SEX variablecmap = CategoricalColorMapper(    factors=(&#39;FEMALE&#39;, &#39;MALE&#39;),    palette=Set2[3])# define a function to enable reusedef plot_diabetes(x, width=480, height=320,                  legend=None, legend_location=None,                  legend_orientation=&#39;vertical&#39;):    hover = HoverTool(        tooltips=[(&#39;Index&#39;, &#39;$index&#39;),                  (x, &#39;$x&#39;),                  (&#39;Progression&#39;, &#39;$y&#39;),                  (&#39;Gender&#39;, &#39;@Gender&#39;)                 ])    tools = [hover, &#39;box_select&#39;, &#39;tap&#39;,             &#39;wheel_zoom&#39;, &#39;reset&#39;, &#39;help&#39;]    plt = figure(width=width, height=height,                 title=x +&#39; vs. diabetes progression&#39;,                 tools=tools)    plt.circle(x, &#39;Y&#39;, alpha=0.8, source=one_source,               fill_color={&#39;field&#39;: &#39;Gender&#39;, &#39;transform&#39;: cmap},               line_color={&#39;field&#39;: &#39;Gender&#39;, &#39;transform&#39;: cmap},               # highlight when selected               selection_alpha=1,               selection_fill_color={&#39;field&#39;: &#39;Gender&#39;, &#39;transform&#39;: cmap},               selection_line_color={&#39;field&#39;: &#39;Gender&#39;, &#39;transform&#39;: cmap},               # mute when not selected               nonselection_alpha=0.2,               nonselection_fill_color={&#39;field&#39;: &#39;Gender&#39;, &#39;transform&#39;: cmap},               nonselection_line_color=None,               legend=legend)    plt.xaxis.axis_label = x    plt.xaxis.axis_label_text_font_style = &#39;normal&#39;    plt.yaxis.axis_label = &#39;Diabetes progression&#39;    plt.yaxis.axis_label_text_font_style = &#39;normal&#39;    if(legend):        plt.legend.location = legend_location        plt.legend.orientation = legend_orientation        plt.legend.background_fill_alpha = 0.7    return(plt)p1 = plot_diabetes(&#39;Age&#39;, legend=&#39;Gender&#39;, legend_location=&#39;top_left&#39;,                   legend_orientation=&#39;horizontal&#39;)output_file(&#39;../html/01-bokeh-plot-example-plot-01.html&#39;)show(p1)    You can now see an interactive scatter plot. A toolbar is placed beside the plot where you can switch on and off different tools we included. In particular, in this plot you can see the values for each data point when you hover over them. You can set the list of values you want to show by configuring tooltips with a list of (label, value) pairs in the HoverTool object.You can refer to different variables in the source dataset by prefixing @. Fields starting with $ will are used for “special fields” such as the coordinates and the color apparently the color values are pulled from the data source, not the figure’s fill_color as used above.Create multiple linked plotsNow, I am going to create multiple plots and place them in a single grid using bokeh library’s gridplot. The plots are linked by a single data source. Selecting data points in one plot will highlight the same data points in all.plots = [plot_diabetes(x, 240, 180)         for x in df.columns         if x not in [&#39;SEX&#39;, &#39;Gender&#39;, &#39;Y&#39;]]# create an empty plot with only the titlegtitle = figure(width=240, height=80, title=&#39;Linked scatter plots&#39;)gtitle.circle(0, 0, fill_color=None, line_color=None)gtitle.title.text_font_size = &#39;18px&#39;gtitle.border_fill_color = Nonegtitle.grid.visible = Falsegtitle.axis.visible = Falsegtitle.outline_line_color = None# create an empty plot with only the legendglegend = figure(width=240, height=80, title=None)glegend.circle(0,0, fill_color=Set2[3][0], line_color=Set2[3][0], legend=&#39;FEMALE&#39;)glegend.circle(0,0, fill_color=Set2[3][1], line_color=Set2[3][1], legend=&#39;MALE&#39;)glegend.border_fill_color = Noneglegend.grid.visible = Falseglegend.axis.visible = Falseglegend.outline_line_color = Noneglegend.legend.border_line_color = Noneglegend.legend.location = &#39;center&#39;output_file(&#39;../html/01-bokeh-plot-example-plot-02.html&#39;)show(gridplot([gtitle, None, glegend] + plots, ncols=3))    You can now see nine different plots linked with a single data source. When you select any data points in one plot the same data points are highlighted across all while the rest are ‘muted’.This could be useful when inspecting data with multiple dimensions. For example, when I clicked on the person with the highest S1 measurement, I can she that he also had the highest measurements of S2 and S4. Besides, it is just fun playing with these plots. I am looking forward to going through more of the library examples and tutorials.",
        "date": "Oct 06, 2017",
        "url": " https://blog.micbon.com//post/linked-bokeh-plot/",
        "author": "Michael J. Moon",
        "tags": "bokeh, python, data-visualization, pandas"
    }
    
]
